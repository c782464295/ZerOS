# 启动
首先，让我们看看树莓派处理器是如何启动的。

BCM2385 包括两个处理器，一个是 Videocore(tm) GPU，另一个是运行操作系统的 ARM 内核。

GPU 在复位或开机时开始运行，并包含用于读取 MMC 总线上 SD 卡的第一个 FAT 分区的代码。

它搜索一个名为 bootcode.bin 的文件并将其加载到内存中并开始执行该代码。

bootcode.bin 引导加载程序依次在 SD 卡中搜索名为 start.elf 的文件和一个 config.txt 文件以设置各种内核设置。

然后再次在 SD 卡中搜索 kernel.img 文件，然后在特定位置加载到内存中地址 (0x8000) 并启动。

ARM 将开始使用 kernel.img 中包含的代码启动。

start.elf 文件包含在 GPU 上运行的代码，以提供 OpenGL 等的大部分要求。

因此，为了引导您自己的代码，您需要首先将您的代码编译为可执行文件并将其命名为 kernel.img，然后将其放入具有 GPU 引导加载程序（bootcode.bin 和 start.elf）的 FAT 格式的 SD 卡上。

引导加载程序位于boot 子目录下 。提供的其余固件是封闭式二进制视频驱动程序。

所有这些都意味着处理器在开始运行我们的代码时已经启动并运行。

我们开始从已经运行的核心开始处理设备寄存器。通常我的代码中的第一件事是设置正确的时钟来初始化处理器，但是 GPU 已经为我们设置了基本的时钟方案。

我们需要设置的第一件事是 GPIO 控制器。我们没有可以依赖的驱动程序，因为没有操作系统在运行，引导加载程序所做的只是将处理器引导到工作状态，准备开始加载操作系统。

ARM 物理地址是未使用 ARM 内存管理单元 (MMU) 时的处理器原始 IO 映射。如果正在使用 MMU，那么虚拟地址空间就是我们感兴趣的。

