
kernel.elf:     file format elf32-littlearm


Disassembly of section .text.init:

00008000 <_start>:
.globl _start
_start:
	@ 指定中断向量
	@ 0x00 复位 0x04 未定义指令 0x08 软中断 0x0c 预读取中断 0x10 数据访问中止
	@ 0x14 保留中断 0x18 中断要求（用于外设） 0x1c 快速中断要求
	ldr pc, sig_reset
    8000:	e59ff018 	ldr	pc, [pc, #24]	; 8020 <sig_reset>
	ldr pc, sig_undef
    8004:	e59ff018 	ldr	pc, [pc, #24]	; 8024 <sig_undef>
	ldr pc, sig_swi
    8008:	e59ff018 	ldr	pc, [pc, #24]	; 8028 <sig_swi>
	ldr pc, sig_prefa
    800c:	e59ff018 	ldr	pc, [pc, #24]	; 802c <sig_prefa>
	ldr pc, sig_dataa
    8010:	e59ff018 	ldr	pc, [pc, #24]	; 8030 <sig_dataa>
	ldr pc, sig_unused	@ _unused 未使用
    8014:	e59ff018 	ldr	pc, [pc, #24]	; 8034 <sig_unused>
	ldr pc, sig_irq
    8018:	e59ff018 	ldr	pc, [pc, #24]	; 8038 <sig_irq>
	ldr pc, sig_fiq
    801c:	e59ff018 	ldr	pc, [pc, #24]	; 803c <sig_fiq>

00008020 <sig_reset>:
    8020:	000089b4 	.word	0x000089b4

00008024 <sig_undef>:
    8024:	000082f0 	.word	0x000082f0

00008028 <sig_swi>:
    8028:	000082fc 	.word	0x000082fc

0000802c <sig_prefa>:
    802c:	00008308 	.word	0x00008308

00008030 <sig_dataa>:
    8030:	00008314 	.word	0x00008314

00008034 <sig_unused>:
    8034:	00008320 	.word	0x00008320

00008038 <sig_irq>:
    8038:	0000832c 	.word	0x0000832c

0000803c <sig_fiq>:
    803c:	0000834c 	.word	0x0000834c

Disassembly of section .text:

00008040 <GetDefaultFontData>:
    0x07000000, 0xfc0f0000, 0x48000000, 0x05004600, 0x01000d00, 0x07000000, 0xfd0f0000, 0x4e000000, 0x05004600, 0x01000d00, 0x07000000, 0xfe0f0000, 
    0x54000000, 0x05004600, 0x01000d00, 0x07000000, 0xff0f0000, 0x5a000000, 0x05004600, 0x01000d00, 0x07000000, 0x000f0000, 
};

void GetDefaultFontData(const void** fnt_data, unsigned int* fnt_size, const void** png_data, unsigned int* png_size)
{
    8040:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8044:	e28db000 	add	fp, sp, #0
    8048:	e24dd014 	sub	sp, sp, #20
    804c:	e50b0008 	str	r0, [fp, #-8]
    8050:	e50b100c 	str	r1, [fp, #-12]
    8054:	e50b2010 	str	r2, [fp, #-16]
    8058:	e50b3014 	str	r3, [fp, #-20]
	if (fnt_data) *fnt_data = (const void*)proggy_clean_13_fnt_data;
    805c:	e51b3008 	ldr	r3, [fp, #-8]
    8060:	e3530000 	cmp	r3, #0
    8064:	0a000002 	beq	8074 <GetDefaultFontData+0x34>
    8068:	e51b3008 	ldr	r3, [fp, #-8]
    806c:	e59f2054 	ldr	r2, [pc, #84]	; 80c8 <BSC_START_READ+0x37>
    8070:	e5832000 	str	r2, [r3]
	if (fnt_size) *fnt_size = proggy_clean_13_fnt_size;
    8074:	e51b300c 	ldr	r3, [fp, #-12]
    8078:	e3530000 	cmp	r3, #0
    807c:	0a000002 	beq	808c <BSC_START_WRITE+0xc>
    8080:	e59f2044 	ldr	r2, [pc, #68]	; 80cc <BSC_START_READ+0x3b>
    8084:	e51b300c 	ldr	r3, [fp, #-12]
    8088:	e5832000 	str	r2, [r3]
	if (png_data) *png_data = (const void*)proggy_clean_13_png_data;
    808c:	e51b3010 	ldr	r3, [fp, #-16]
    8090:	e3530000 	cmp	r3, #0
    8094:	0a000002 	beq	80a4 <BSC_START_READ+0x13>
    8098:	e51b3010 	ldr	r3, [fp, #-16]
    809c:	e59f202c 	ldr	r2, [pc, #44]	; 80d0 <BSC_START_READ+0x3f>
    80a0:	e5832000 	str	r2, [r3]
	if (png_size) *png_size = proggy_clean_13_png_size;
    80a4:	e51b3014 	ldr	r3, [fp, #-20]
    80a8:	e3530000 	cmp	r3, #0
    80ac:	0a000002 	beq	80bc <BSC_START_READ+0x2b>
    80b0:	e59f201c 	ldr	r2, [pc, #28]	; 80d4 <BSC_START_READ+0x43>
    80b4:	e51b3014 	ldr	r3, [fp, #-20]
    80b8:	e5832000 	str	r2, [r3]
    80bc:	e24bd000 	sub	sp, fp, #0
    80c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    80c4:	e12fff1e 	bx	lr
    80c8:	0000907c 	.word	0x0000907c
    80cc:	00001227 	.word	0x00001227
    80d0:	00008a60 	.word	0x00008a60
    80d4:	00000615 	.word	0x00000615

000080d8 <gpu_Init_GPU>:
#include "gpu.h"


//初始化
u32 gpu_Init_GPU(u32 width, u32 height, u32 bitDepth)
{
    80d8:	e92d4800 	push	{fp, lr}
    80dc:	e28db004 	add	fp, sp, #4
    80e0:	e24dd018 	sub	sp, sp, #24
    80e4:	e50b0010 	str	r0, [fp, #-16]
    80e8:	e50b1014 	str	r1, [fp, #-20]
    80ec:	e50b2018 	str	r2, [fp, #-24]
	volatile u32 GPU_MSG = 0;
    80f0:	e3a03000 	mov	r3, #0
    80f4:	e50b300c 	str	r3, [fp, #-12]
	
	/*参数检查*/
	if(width > 4096 || height > 4096 || bitDepth > 32)
    80f8:	e51b3010 	ldr	r3, [fp, #-16]
    80fc:	e3530a01 	cmp	r3, #4096	; 0x1000
    8100:	8a000005 	bhi	811c <gpu_Init_GPU+0x44>
    8104:	e51b3014 	ldr	r3, [fp, #-20]
    8108:	e3530a01 	cmp	r3, #4096	; 0x1000
    810c:	8a000002 	bhi	811c <gpu_Init_GPU+0x44>
    8110:	e51b3018 	ldr	r3, [fp, #-24]
    8114:	e3530020 	cmp	r3, #32
    8118:	9a000001 	bls	8124 <gpu_Init_GPU+0x4c>
	{
		return 0;
    811c:	e3a03000 	mov	r3, #0
    8120:	ea00001a 	b	8190 <gpu_Init_GPU+0xb8>
	}
	struct FrameBufferInfoS *bufInfo = (struct FrameBufferInfoS *) &FrameBufferInfo;
    8124:	e59f3070 	ldr	r3, [pc, #112]	; 819c <gpu_Init_GPU+0xc4>
    8128:	e50b3008 	str	r3, [fp, #-8]

	bufInfo->phyWidth = width;
    812c:	e51b3008 	ldr	r3, [fp, #-8]
    8130:	e51b2010 	ldr	r2, [fp, #-16]
    8134:	e5832000 	str	r2, [r3]
	bufInfo->phyHeight = height;
    8138:	e51b3008 	ldr	r3, [fp, #-8]
    813c:	e51b2014 	ldr	r2, [fp, #-20]
    8140:	e5832004 	str	r2, [r3, #4]
	bufInfo->virWidth = width;
    8144:	e51b3008 	ldr	r3, [fp, #-8]
    8148:	e51b2010 	ldr	r2, [fp, #-16]
    814c:	e5832008 	str	r2, [r3, #8]
	bufInfo->virHeight = height;
    8150:	e51b3008 	ldr	r3, [fp, #-8]
    8154:	e51b2014 	ldr	r2, [fp, #-20]
    8158:	e583200c 	str	r2, [r3, #12]
	bufInfo->bitDepth = bitDepth;
    815c:	e51b3008 	ldr	r3, [fp, #-8]
    8160:	e51b2018 	ldr	r2, [fp, #-24]
    8164:	e5832014 	str	r2, [r3, #20]
	
	/*禁用cache，读取内存值，防止产生误差。0x40000000 */
	GPU_MSG = (u32) bufInfo + 0x40000000; 
    8168:	e51b3008 	ldr	r3, [fp, #-8]
    816c:	e2833101 	add	r3, r3, #1073741824	; 0x40000000
    8170:	e50b300c 	str	r3, [fp, #-12]
	gpu_SendMail(GPU_MSG, 1);
    8174:	e51b300c 	ldr	r3, [fp, #-12]
    8178:	e1a00003 	mov	r0, r3
    817c:	e3a01001 	mov	r1, #1
    8180:	eb000006 	bl	81a0 <gpu_SendMail>
	return gpu_RecMail(1);
    8184:	e3a00001 	mov	r0, #1
    8188:	eb00002b 	bl	823c <gpu_RecMail>
    818c:	e1a03000 	mov	r3, r0
}
    8190:	e1a00003 	mov	r0, r3
    8194:	e24bd004 	sub	sp, fp, #4
    8198:	e8bd8800 	pop	{fp, pc}
    819c:	0000a2b8 	.word	0x0000a2b8

000081a0 <gpu_SendMail>:



int gpu_SendMail(u32 GPU_MSG, u32 channel)
{
    81a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    81a4:	e28db000 	add	fp, sp, #0
    81a8:	e24dd014 	sub	sp, sp, #20
    81ac:	e50b0010 	str	r0, [fp, #-16]
    81b0:	e50b1014 	str	r1, [fp, #-20]
	volatile u32 *Status = (u32 *)GPU_Status;
    81b4:	e59f3078 	ldr	r3, [pc, #120]	; 8234 <gpu_SendMail+0x94>
    81b8:	e50b3008 	str	r3, [fp, #-8]
	volatile u32 *Write = (u32 *) GPU_Write;
    81bc:	e59f3074 	ldr	r3, [pc, #116]	; 8238 <gpu_SendMail+0x98>
    81c0:	e50b300c 	str	r3, [fp, #-12]
	
	/*参数检查*/
	if((GPU_MSG & 0xF) != 0)
    81c4:	e51b3010 	ldr	r3, [fp, #-16]
    81c8:	e203300f 	and	r3, r3, #15
    81cc:	e3530000 	cmp	r3, #0
    81d0:	0a000001 	beq	81dc <gpu_SendMail+0x3c>
	{
		return -1;
    81d4:	e3e03000 	mvn	r3, #0
    81d8:	ea000011 	b	8224 <gpu_SendMail+0x84>
	}

	if((channel > 15) || (channel < 0))
    81dc:	e51b3014 	ldr	r3, [fp, #-20]
    81e0:	e353000f 	cmp	r3, #15
    81e4:	9a000001 	bls	81f0 <gpu_SendMail+0x50>
	{
		return -1;
    81e8:	e3e03000 	mvn	r3, #0
    81ec:	ea00000c 	b	8224 <gpu_SendMail+0x84>
	}

	/* 循环等待状态寄存器的最高为为0.则可以发送消息 */
	while((*Status & 0x80000000) != 0);
    81f0:	e1a00000 	nop			; (mov r0, r0)
    81f4:	e51b3008 	ldr	r3, [fp, #-8]
    81f8:	e5933000 	ldr	r3, [r3]
    81fc:	e3530000 	cmp	r3, #0
    8200:	bafffffb 	blt	81f4 <gpu_SendMail+0x54>

	/* 按照格式发送消息到GPU */
	/* 低4位是要写入的mail，而高28位是要写入的消息 */
	GPU_MSG = GPU_MSG + channel;  
    8204:	e51b2010 	ldr	r2, [fp, #-16]
    8208:	e51b3014 	ldr	r3, [fp, #-20]
    820c:	e0823003 	add	r3, r2, r3
    8210:	e50b3010 	str	r3, [fp, #-16]
	*Write = GPU_MSG;
    8214:	e51b300c 	ldr	r3, [fp, #-12]
    8218:	e51b2010 	ldr	r2, [fp, #-16]
    821c:	e5832000 	str	r2, [r3]
	
	return 0;
    8220:	e3a03000 	mov	r3, #0
}
    8224:	e1a00003 	mov	r0, r3
    8228:	e24bd000 	sub	sp, fp, #0
    822c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    8230:	e12fff1e 	bx	lr
    8234:	2000b898 	.word	0x2000b898
    8238:	2000b8a0 	.word	0x2000b8a0

0000823c <gpu_RecMail>:



u32 gpu_RecMail(u32 channel)
{
    823c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8240:	e28db000 	add	fp, sp, #0
    8244:	e24dd01c 	sub	sp, sp, #28
    8248:	e50b0018 	str	r0, [fp, #-24]
	volatile u32 *Status = (u32 *)GPU_Status;
    824c:	e59f3090 	ldr	r3, [pc, #144]	; 82e4 <gpu_RecMail+0xa8>
    8250:	e50b3008 	str	r3, [fp, #-8]
	volatile u32 *Read = (u32 *) GPU_Read;
    8254:	e59f308c 	ldr	r3, [pc, #140]	; 82e8 <gpu_RecMail+0xac>
    8258:	e50b300c 	str	r3, [fp, #-12]
	volatile u32 GPU_MSG = 0;
    825c:	e3a03000 	mov	r3, #0
    8260:	e50b3010 	str	r3, [fp, #-16]
	
	/*参数检查*/
	if((channel > 15) || (channel < 0))
    8264:	e51b3018 	ldr	r3, [fp, #-24]
    8268:	e353000f 	cmp	r3, #15
    826c:	9a000001 	bls	8278 <gpu_RecMail+0x3c>
	{
		return 0;
    8270:	e3a03000 	mov	r3, #0
    8274:	ea000016 	b	82d4 <gpu_RecMail+0x98>
	}
	do{
		/*循环等待状态寄存器30bit为0.则可以接收消息*/
		while((*Status & 0x40000000) != 0);
    8278:	e1a00000 	nop			; (mov r0, r0)
    827c:	e51b3008 	ldr	r3, [fp, #-8]
    8280:	e5933000 	ldr	r3, [r3]
    8284:	e2033101 	and	r3, r3, #1073741824	; 0x40000000
    8288:	e3530000 	cmp	r3, #0
    828c:	1afffffa 	bne	827c <gpu_RecMail+0x40>
		
		GPU_MSG = *Read;
    8290:	e51b300c 	ldr	r3, [fp, #-12]
    8294:	e5933000 	ldr	r3, [r3]
    8298:	e50b3010 	str	r3, [fp, #-16]
		/*通过channel判断是否是所需的消息*/
		if((GPU_MSG & 0xF) == channel)
    829c:	e51b3010 	ldr	r3, [fp, #-16]
    82a0:	e203200f 	and	r2, r3, #15
    82a4:	e51b3018 	ldr	r3, [fp, #-24]
    82a8:	e1520003 	cmp	r2, r3
    82ac:	1a000007 	bne	82d0 <gpu_RecMail+0x94>
		{
			/*GPU_MSG = 0 表示成功发送消息，否则失败*/
			GPU_MSG = (GPU_MSG & 0xFFFFFFF0);
    82b0:	e51b3010 	ldr	r3, [fp, #-16]
    82b4:	e3c3300f 	bic	r3, r3, #15
    82b8:	e50b3010 	str	r3, [fp, #-16]
			if(GPU_MSG == 0)
    82bc:	e51b3010 	ldr	r3, [fp, #-16]
    82c0:	e3530000 	cmp	r3, #0
    82c4:	1a000001 	bne	82d0 <gpu_RecMail+0x94>
			{
				return (u32)&FrameBufferInfo;				
    82c8:	e59f301c 	ldr	r3, [pc, #28]	; 82ec <gpu_RecMail+0xb0>
    82cc:	ea000000 	b	82d4 <gpu_RecMail+0x98>
			}
		}
	}while(1);
    82d0:	eaffffe8 	b	8278 <gpu_RecMail+0x3c>
}
    82d4:	e1a00003 	mov	r0, r3
    82d8:	e24bd000 	sub	sp, fp, #0
    82dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    82e0:	e12fff1e 	bx	lr
    82e4:	2000b898 	.word	0x2000b898
    82e8:	2000b880 	.word	0x2000b880
    82ec:	0000a2b8 	.word	0x0000a2b8

000082f0 <_undef>:
	当然这样也可以
*/



__attribute__((interrupt("UNDEF"))) void _undef(void){
    82f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    82f4:	e28db000 	add	fp, sp, #0
	while(1){

	}
    82f8:	eafffffe 	b	82f8 <_undef+0x8>

000082fc <_swi>:
}


__attribute__((interrupt("SWI"))) void _swi(void){
    82fc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8300:	e28db000 	add	fp, sp, #0
	while(1){
		
	}
    8304:	eafffffe 	b	8304 <_swi+0x8>

00008308 <_prefa>:
}
void _prefa(void){
    8308:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    830c:	e28db000 	add	fp, sp, #0
	while(1){
		
	}
    8310:	eafffffe 	b	8310 <_prefa+0x8>

00008314 <_dataa>:
}
void _dataa(void){
    8314:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8318:	e28db000 	add	fp, sp, #0
	while(1){
		
	}
    831c:	eafffffe 	b	831c <_dataa+0x8>

00008320 <_unused>:
}
void _unused(void){
    8320:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8324:	e28db000 	add	fp, sp, #0
	while(1){
		
	}
    8328:	eafffffe 	b	8328 <_unused+0x8>

0000832c <_irq>:
}
/* void __attribute__((interrupt("IRQ"))) interrupt_vector(void)
	但是反汇编发现好像没用，所以写汇编实现其功能
*/
__attribute__((naked)) void _irq(void){
	asm volatile ( "sub lr, lr, #4" );
    832c:	e24ee004 	sub	lr, lr, #4
	asm volatile ( "stmdb sp!, {r0, r1, r2, r3, r4, ip, lr}" );
    8330:	e92d501f 	push	{r0, r1, r2, r3, r4, ip, lr}

	if(ArmTimer -> MaskedIRQ){
    8334:	e59f300c 	ldr	r3, [pc, #12]	; 8348 <_irq+0x1c>
    8338:	e5933000 	ldr	r3, [r3]
    833c:	e5933014 	ldr	r3, [r3, #20]

	}


	asm volatile ( "ldmia sp!, {r0, r1, r2, r3, r4, ip, pc}" );
    8340:	e8bd901f 	pop	{r0, r1, r2, r3, r4, ip, pc}
	asm volatile ( "add lr, lr, #4" );
    8344:	e28ee004 	add	lr, lr, #4
    8348:	00008a48 	.word	0x00008a48

0000834c <_fiq>:
}

void _fiq(void){
    834c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8350:	e28db000 	add	fp, sp, #0
	while(1){
		
	}
    8354:	eafffffe 	b	8354 <_fiq+0x8>

00008358 <os_main>:

volatile u32* gpioregs;

// 三个参数，因为没有用到，释放
// 否则会造成3个寄存器被占用
 void os_main(u32 r0, u32 r1, u32 atags){
    8358:	e92d4800 	push	{fp, lr}
    835c:	e28db004 	add	fp, sp, #4
    8360:	e24dd018 	sub	sp, sp, #24
    8364:	e50b0010 	str	r0, [fp, #-16]
    8368:	e50b1014 	str	r1, [fp, #-20]
    836c:	e50b2018 	str	r2, [fp, #-24]
	(void) r0;
	(void) r1;
	
	memory_init(atags);
    8370:	e51b0018 	ldr	r0, [fp, #-24]
    8374:	eb000059 	bl	84e0 <memory_init>

    
    ARM_timer_init();
    8378:	eb000083 	bl	858c <ARM_timer_init>

    // create pointer to the gpioregs;
    gpioregs = (u32*)GPIOREGS;
    837c:	e59f30e0 	ldr	r3, [pc, #224]	; 8464 <os_main+0x10c>
    8380:	e59f20e0 	ldr	r2, [pc, #224]	; 8468 <os_main+0x110>
    8384:	e5832000 	str	r2, [r3]
    

    gpioregs[GPFSEL4] = (1 << 21);
    8388:	e59f30d4 	ldr	r3, [pc, #212]	; 8464 <os_main+0x10c>
    838c:	e5933000 	ldr	r3, [r3]
    8390:	e2833010 	add	r3, r3, #16
    8394:	e3a02602 	mov	r2, #2097152	; 0x200000
    8398:	e5832000 	str	r2, [r3]

    
    // set gpio16 as output
    gpioregs[GPFSEL1] |= (1 << 18);
    839c:	e59f30c0 	ldr	r3, [pc, #192]	; 8464 <os_main+0x10c>
    83a0:	e5933000 	ldr	r3, [r3]
    83a4:	e2833004 	add	r3, r3, #4
    83a8:	e59f20b4 	ldr	r2, [pc, #180]	; 8464 <os_main+0x10c>
    83ac:	e5922000 	ldr	r2, [r2]
    83b0:	e2822004 	add	r2, r2, #4
    83b4:	e5922000 	ldr	r2, [r2]
    83b8:	e3822701 	orr	r2, r2, #262144	; 0x40000
    83bc:	e5832000 	str	r2, [r3]
    u32 ra;
    while(1)
    {
        
        // 亮
        gpioregs[GPCLR0] = (1 << 16); // GPIO16
    83c0:	e59f309c 	ldr	r3, [pc, #156]	; 8464 <os_main+0x10c>
    83c4:	e5933000 	ldr	r3, [r3]
    83c8:	e2833028 	add	r3, r3, #40	; 0x28
    83cc:	e3a02801 	mov	r2, #65536	; 0x10000
    83d0:	e5832000 	str	r2, [r3]
        gpioregs[GPCLR1] = 1<<(47-32); // 树莓派zero上自带的那个绿色指示灯
    83d4:	e59f3088 	ldr	r3, [pc, #136]	; 8464 <os_main+0x10c>
    83d8:	e5933000 	ldr	r3, [r3]
    83dc:	e283302c 	add	r3, r3, #44	; 0x2c
    83e0:	e3a02902 	mov	r2, #32768	; 0x8000
    83e4:	e5832000 	str	r2, [r3]
        for(ra=0;ra<0x100000;ra++) dummy();
    83e8:	e3a03000 	mov	r3, #0
    83ec:	e50b3008 	str	r3, [fp, #-8]
    83f0:	ea000003 	b	8404 <os_main+0xac>
    83f4:	eb000181 	bl	8a00 <dummy>
    83f8:	e51b3008 	ldr	r3, [fp, #-8]
    83fc:	e2833001 	add	r3, r3, #1
    8400:	e50b3008 	str	r3, [fp, #-8]
    8404:	e51b3008 	ldr	r3, [fp, #-8]
    8408:	e3530601 	cmp	r3, #1048576	; 0x100000
    840c:	3afffff8 	bcc	83f4 <os_main+0x9c>
        

        // 灭
        gpioregs[GPSET0] = (1 << 16); // GPIO16
    8410:	e59f304c 	ldr	r3, [pc, #76]	; 8464 <os_main+0x10c>
    8414:	e5933000 	ldr	r3, [r3]
    8418:	e283301c 	add	r3, r3, #28
    841c:	e3a02801 	mov	r2, #65536	; 0x10000
    8420:	e5832000 	str	r2, [r3]
        gpioregs[GPSET1] = 1<<(47-32);
    8424:	e59f3038 	ldr	r3, [pc, #56]	; 8464 <os_main+0x10c>
    8428:	e5933000 	ldr	r3, [r3]
    842c:	e2833020 	add	r3, r3, #32
    8430:	e3a02902 	mov	r2, #32768	; 0x8000
    8434:	e5832000 	str	r2, [r3]
        for(ra=0;ra<0x100000;ra++) dummy();
    8438:	e3a03000 	mov	r3, #0
    843c:	e50b3008 	str	r3, [fp, #-8]
    8440:	ea000003 	b	8454 <os_main+0xfc>
    8444:	eb00016d 	bl	8a00 <dummy>
    8448:	e51b3008 	ldr	r3, [fp, #-8]
    844c:	e2833001 	add	r3, r3, #1
    8450:	e50b3008 	str	r3, [fp, #-8]
    8454:	e51b3008 	ldr	r3, [fp, #-8]
    8458:	e3530601 	cmp	r3, #1048576	; 0x100000
    845c:	3afffff8 	bcc	8444 <os_main+0xec>

        
    }
    8460:	eaffffd6 	b	83c0 <os_main+0x68>
    8464:	0000a2e0 	.word	0x0000a2e0
    8468:	20200000 	.word	0x20200000

0000846c <get_mem_size>:

static u32 num_pages;

/* Gets the total memory size from the atags. */
u32 get_mem_size (struct atag_t *tag)
{
    846c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    8470:	e28db000 	add	fp, sp, #0
    8474:	e24dd00c 	sub	sp, sp, #12
    8478:	e50b0008 	str	r0, [fp, #-8]
	while (tag->tag != NONE) {
    847c:	ea00000d 	b	84b8 <get_mem_size+0x4c>
		if (tag->tag == MEM)
    8480:	e51b3008 	ldr	r3, [fp, #-8]
    8484:	e5932004 	ldr	r2, [r3, #4]
    8488:	e59f304c 	ldr	r3, [pc, #76]	; 84dc <get_mem_size+0x70>
    848c:	e1520003 	cmp	r2, r3
    8490:	1a000002 	bne	84a0 <get_mem_size+0x34>
			return tag->mem.size;
    8494:	e51b3008 	ldr	r3, [fp, #-8]
    8498:	e593300c 	ldr	r3, [r3, #12]
    849c:	ea00000a 	b	84cc <get_mem_size+0x60>
		tag = (struct atag_t *)(((u32 *)tag) + tag->tag_size);
    84a0:	e51b3008 	ldr	r3, [fp, #-8]
    84a4:	e5933000 	ldr	r3, [r3]
    84a8:	e1a03103 	lsl	r3, r3, #2
    84ac:	e51b2008 	ldr	r2, [fp, #-8]
    84b0:	e0823003 	add	r3, r2, r3
    84b4:	e50b3008 	str	r3, [fp, #-8]
static u32 num_pages;

/* Gets the total memory size from the atags. */
u32 get_mem_size (struct atag_t *tag)
{
	while (tag->tag != NONE) {
    84b8:	e51b3008 	ldr	r3, [fp, #-8]
    84bc:	e5933004 	ldr	r3, [r3, #4]
    84c0:	e3530000 	cmp	r3, #0
    84c4:	1affffed 	bne	8480 <get_mem_size+0x14>
		if (tag->tag == MEM)
			return tag->mem.size;
		tag = (struct atag_t *)(((u32 *)tag) + tag->tag_size);
	}
	return 0;
    84c8:	e3a03000 	mov	r3, #0
}
    84cc:	e1a00003 	mov	r0, r3
    84d0:	e24bd000 	sub	sp, fp, #0
    84d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    84d8:	e12fff1e 	bx	lr
    84dc:	54410002 	.word	0x54410002

000084e0 <memory_init>:

u32 memory_init(struct atag_t *atags){
    84e0:	e92d4800 	push	{fp, lr}
    84e4:	e28db004 	add	fp, sp, #4
    84e8:	e24dd010 	sub	sp, sp, #16
    84ec:	e50b0010 	str	r0, [fp, #-16]
    u32 mem_size;

    mem_size = get_mem_size(atags);
    84f0:	e51b0010 	ldr	r0, [fp, #-16]
    84f4:	ebffffdc 	bl	846c <get_mem_size>
    84f8:	e50b0008 	str	r0, [fp, #-8]
    num_pages = mem_size / PAGE_SIZE;
    84fc:	e51b3008 	ldr	r3, [fp, #-8]
    8500:	e1a02623 	lsr	r2, r3, #12
    8504:	e59f3010 	ldr	r3, [pc, #16]	; 851c <memory_init+0x3c>
    8508:	e5832000 	str	r2, [r3]

	return 1;
    850c:	e3a03001 	mov	r3, #1
    8510:	e1a00003 	mov	r0, r3
    8514:	e24bd004 	sub	sp, fp, #4
    8518:	e8bd8800 	pop	{fp, pc}
    851c:	0000a2b4 	.word	0x0000a2b4

00008520 <_cstartup>:
// GPU引导程序通过r0-r2和boot.S将参数传递给内核，
// 参数r0包含用于启动的设备的代码。
// r1包含ARM Linux机器类型
// r2包含ATAG的地址
void _cstartup( u32 r0, u32 r1, u32 atags )
{
    8520:	e92d4800 	push	{fp, lr}
    8524:	e28db004 	add	fp, sp, #4
    8528:	e24dd018 	sub	sp, sp, #24
    852c:	e50b0010 	str	r0, [fp, #-16]
    8530:	e50b1014 	str	r1, [fp, #-20]
    8534:	e50b2018 	str	r2, [fp, #-24]
	// 在ld文件中计算出的bss大小，C环境要求BSS清0，这里我们手动清0
	// unsigned int var1;
	// unsigned int funcvar1;
    // static unsigned int funcvar2;
	// 这种变量都在BSS中，否则这些值将会是随机的，不会被初始化为0
	int* bss = &__bss_start__;
    8538:	e59f3044 	ldr	r3, [pc, #68]	; 8584 <_cstartup+0x64>
    853c:	e50b3008 	str	r3, [fp, #-8]
	int* bss_end = &__bss_end__;
    8540:	e59f3040 	ldr	r3, [pc, #64]	; 8588 <_cstartup+0x68>
    8544:	e50b300c 	str	r3, [fp, #-12]
 
	// 将BSS内存部分初始化为全0
    while( bss < bss_end )
    8548:	ea000004 	b	8560 <_cstartup+0x40>
    	*bss++ = 0;
    854c:	e51b3008 	ldr	r3, [fp, #-8]
    8550:	e2832004 	add	r2, r3, #4
    8554:	e50b2008 	str	r2, [fp, #-8]
    8558:	e3a02000 	mov	r2, #0
    855c:	e5832000 	str	r2, [r3]
	// 这种变量都在BSS中，否则这些值将会是随机的，不会被初始化为0
	int* bss = &__bss_start__;
	int* bss_end = &__bss_end__;
 
	// 将BSS内存部分初始化为全0
    while( bss < bss_end )
    8560:	e51b2008 	ldr	r2, [fp, #-8]
    8564:	e51b300c 	ldr	r3, [fp, #-12]
    8568:	e1520003 	cmp	r2, r3
    856c:	3afffff6 	bcc	854c <_cstartup+0x2c>
    	*bss++ = 0;
 
	// 死循环，不会返回
    os_main(r0, r1, atags);
    8570:	e51b0010 	ldr	r0, [fp, #-16]
    8574:	e51b1014 	ldr	r1, [fp, #-20]
    8578:	e51b2018 	ldr	r2, [fp, #-24]
    857c:	ebffff75 	bl	8358 <os_main>

	while(1){
		/* 空! */
		// 这里没什么用，因为OS-main也不会返回
	}
    8580:	eafffffe 	b	8580 <_cstartup+0x60>
    8584:	0000a2b2 	.word	0x0000a2b2
    8588:	0000a2e4 	.word	0x0000a2e4

0000858c <ARM_timer_init>:
#include "timer.h"




void ARM_timer_init(){
    858c:	e92d4800 	push	{fp, lr}
    8590:	e28db004 	add	fp, sp, #4
    /* 启用arm定时器IRQ */
    rpiIRQController -> Enable_Basic_IRQs = BASIC_ARM_TIMER_IRQ;
    8594:	e59f3030 	ldr	r3, [pc, #48]	; 85cc <ARM_timer_init+0x40>
    8598:	e5933000 	ldr	r3, [r3]
    859c:	e3a02001 	mov	r2, #1
    85a0:	e5832018 	str	r2, [r3, #24]
       而我们load设置的是1万，所以每秒会触发1百万/1万=100次中断

       当设为ARMTIMER_CTRL_PRESCALE_256，表示每秒Load会减去256次
       而我们load设置的是1，所以每秒会触发256/1=256次中断
    */
    ArmTimer -> Load = Kernrl_100Hz;
    85a4:	e59f3024 	ldr	r3, [pc, #36]	; 85d0 <ARM_timer_init+0x44>
    85a8:	e5933000 	ldr	r3, [r3]
    85ac:	e59f2020 	ldr	r2, [pc, #32]	; 85d4 <ARM_timer_init+0x48>
    85b0:	e5832000 	str	r2, [r3]
    /* 启动23位的计时器，计时器启动，计时器中断启动，时钟分频 */
    ArmTimer -> Control =  ARMTIMER_CTRL_23BIT |
    85b4:	e59f3014 	ldr	r3, [pc, #20]	; 85d0 <ARM_timer_init+0x44>
    85b8:	e5933000 	ldr	r3, [r3]
    85bc:	e3a020a2 	mov	r2, #162	; 0xa2
    85c0:	e5832008 	str	r2, [r3, #8]
                                    ARMTIMER_CTRL_ENABLE |
							        ARMTIMER_CTRL_INT_ENABLE |
						        ARMTIMER_CTRL_PRESCALE_1;;
    /* 启用全局中断 */
    _enable_interrupts();
    85c4:	eb000116 	bl	8a24 <_enable_interrupts>


    85c8:	e8bd8800 	pop	{fp, pc}
    85cc:	00008a54 	.word	0x00008a54
    85d0:	00008a58 	.word	0x00008a58
    85d4:	00002710 	.word	0x00002710

000085d8 <notmain>:
#include "stdtype.h"
// 这两个函数定义在startup.s中，以汇编形式存在
extern void PUT32 ( u32, u32 );
extern u32 GET32 ( u32 );

int notmain ( void ) {
    85d8:	e92d4800 	push	{fp, lr}
    85dc:	e28db004 	add	fp, sp, #4
    85e0:	e24dd008 	sub	sp, sp, #8
    u32 cfg;

    PUT32(AUX_ENABLES,1);
    85e4:	e59f00f8 	ldr	r0, [pc, #248]	; 86e4 <notmain+0x10c>
    85e8:	e3a01001 	mov	r1, #1
    85ec:	eb00010a 	bl	8a1c <PUT32>
    PUT32(AUX_MU_IER_REG,0);
    85f0:	e59f00f0 	ldr	r0, [pc, #240]	; 86e8 <notmain+0x110>
    85f4:	e3a01000 	mov	r1, #0
    85f8:	eb000107 	bl	8a1c <PUT32>
    PUT32(AUX_MU_CNTL_REG,0);
    85fc:	e59f00e8 	ldr	r0, [pc, #232]	; 86ec <notmain+0x114>
    8600:	e3a01000 	mov	r1, #0
    8604:	eb000104 	bl	8a1c <PUT32>
    PUT32(AUX_MU_LCR_REG,3);
    8608:	e59f00e0 	ldr	r0, [pc, #224]	; 86f0 <notmain+0x118>
    860c:	e3a01003 	mov	r1, #3
    8610:	eb000101 	bl	8a1c <PUT32>
    PUT32(AUX_MU_MCR_REG,0);
    8614:	e59f00d8 	ldr	r0, [pc, #216]	; 86f4 <notmain+0x11c>
    8618:	e3a01000 	mov	r1, #0
    861c:	eb0000fe 	bl	8a1c <PUT32>
    PUT32(AUX_MU_IER_REG,0);
    8620:	e59f00c0 	ldr	r0, [pc, #192]	; 86e8 <notmain+0x110>
    8624:	e3a01000 	mov	r1, #0
    8628:	eb0000fb 	bl	8a1c <PUT32>
    PUT32(AUX_MU_IIR_REG,0xC6);
    862c:	e59f00c4 	ldr	r0, [pc, #196]	; 86f8 <notmain+0x120>
    8630:	e3a010c6 	mov	r1, #198	; 0xc6
    8634:	eb0000f8 	bl	8a1c <PUT32>
    PUT32(AUX_MU_BAUD_REG,270);
    8638:	e59f00bc 	ldr	r0, [pc, #188]	; 86fc <notmain+0x124>
    863c:	e59f10bc 	ldr	r1, [pc, #188]	; 8700 <notmain+0x128>
    8640:	eb0000f5 	bl	8a1c <PUT32>

    cfg = GET32(GPFSEL1);
    8644:	e59f00b8 	ldr	r0, [pc, #184]	; 8704 <notmain+0x12c>
    8648:	eb0000f1 	bl	8a14 <GET32>
    864c:	e50b000c 	str	r0, [fp, #-12]
    cfg &=~(7<<12); //gpio14
    8650:	e51b300c 	ldr	r3, [fp, #-12]
    8654:	e3c33a07 	bic	r3, r3, #28672	; 0x7000
    8658:	e50b300c 	str	r3, [fp, #-12]
    cfg |= 2<<12;    //alt5
    865c:	e51b300c 	ldr	r3, [fp, #-12]
    8660:	e3833a02 	orr	r3, r3, #8192	; 0x2000
    8664:	e50b300c 	str	r3, [fp, #-12]
	cfg &=~(7<<15); //gpio15
    8668:	e51b300c 	ldr	r3, [fp, #-12]
    866c:	e3c3390e 	bic	r3, r3, #229376	; 0x38000
    8670:	e50b300c 	str	r3, [fp, #-12]
    cfg |= 2<<12;    //alt5
    8674:	e51b300c 	ldr	r3, [fp, #-12]
    8678:	e3833a02 	orr	r3, r3, #8192	; 0x2000
    867c:	e50b300c 	str	r3, [fp, #-12]
    PUT32(GPFSEL1,cfg);
    8680:	e59f007c 	ldr	r0, [pc, #124]	; 8704 <notmain+0x12c>
    8684:	e51b100c 	ldr	r1, [fp, #-12]
    8688:	eb0000e3 	bl	8a1c <PUT32>


    PUT32(AUX_MU_CNTL_REG,3);
    868c:	e59f0058 	ldr	r0, [pc, #88]	; 86ec <notmain+0x114>
    8690:	e3a01003 	mov	r1, #3
    8694:	eb0000e0 	bl	8a1c <PUT32>

    u32 ra=0;
    8698:	e3a03000 	mov	r3, #0
    869c:	e50b3008 	str	r3, [fp, #-8]
    while(1)
    {
        while(1)
        {
            if(GET32(AUX_MU_LSR_REG)&0x20) break;
    86a0:	e59f0060 	ldr	r0, [pc, #96]	; 8708 <notmain+0x130>
    86a4:	eb0000da 	bl	8a14 <GET32>
    86a8:	e1a03000 	mov	r3, r0
    86ac:	e2033020 	and	r3, r3, #32
    86b0:	e3530000 	cmp	r3, #0
    86b4:	0a000009 	beq	86e0 <notmain+0x108>
    86b8:	e1a00000 	nop			; (mov r0, r0)
        }
        PUT32(AUX_MU_IO_REG,0x30+(ra++&7));
    86bc:	e51b3008 	ldr	r3, [fp, #-8]
    86c0:	e2832001 	add	r2, r3, #1
    86c4:	e50b2008 	str	r2, [fp, #-8]
    86c8:	e2033007 	and	r3, r3, #7
    86cc:	e2833030 	add	r3, r3, #48	; 0x30
    86d0:	e59f0034 	ldr	r0, [pc, #52]	; 870c <notmain+0x134>
    86d4:	e1a01003 	mov	r1, r3
    86d8:	eb0000cf 	bl	8a1c <PUT32>
    }
    86dc:	eaffffef 	b	86a0 <notmain+0xc8>
    while(1)
    {
        while(1)
        {
            if(GET32(AUX_MU_LSR_REG)&0x20) break;
        }
    86e0:	eaffffee 	b	86a0 <notmain+0xc8>
    86e4:	20215004 	.word	0x20215004
    86e8:	20215044 	.word	0x20215044
    86ec:	20215060 	.word	0x20215060
    86f0:	2021504c 	.word	0x2021504c
    86f4:	20215050 	.word	0x20215050
    86f8:	20215048 	.word	0x20215048
    86fc:	20215068 	.word	0x20215068
    8700:	0000010e 	.word	0x0000010e
    8704:	20200004 	.word	0x20200004
    8708:	20215054 	.word	0x20215054
    870c:	20215040 	.word	0x20215040

00008710 <uart_putc>:
    return(0);
}


void uart_putc ( u32 c )
{
    8710:	e92d4800 	push	{fp, lr}
    8714:	e28db004 	add	fp, sp, #4
    8718:	e24dd008 	sub	sp, sp, #8
    871c:	e50b0008 	str	r0, [fp, #-8]
    while(1)
    {
        if(GET32(AUX_MU_LSR_REG)&0x20) break;
    8720:	e59f002c 	ldr	r0, [pc, #44]	; 8754 <uart_putc+0x44>
    8724:	eb0000ba 	bl	8a14 <GET32>
    8728:	e1a03000 	mov	r3, r0
    872c:	e2033020 	and	r3, r3, #32
    8730:	e3530000 	cmp	r3, #0
    8734:	0a000000 	beq	873c <uart_putc+0x2c>
    8738:	ea000000 	b	8740 <uart_putc+0x30>
    }
    873c:	eafffff7 	b	8720 <uart_putc+0x10>
    PUT32(AUX_MU_IO_REG,c);
    8740:	e59f0010 	ldr	r0, [pc, #16]	; 8758 <uart_putc+0x48>
    8744:	e51b1008 	ldr	r1, [fp, #-8]
    8748:	eb0000b3 	bl	8a1c <PUT32>
}
    874c:	e24bd004 	sub	sp, fp, #4
    8750:	e8bd8800 	pop	{fp, pc}
    8754:	20215054 	.word	0x20215054
    8758:	20215040 	.word	0x20215040

0000875c <uart_printstr>:


void uart_printstr (const char *str)
{
    875c:	e92d4800 	push	{fp, lr}
    8760:	e28db004 	add	fp, sp, #4
    8764:	e24dd008 	sub	sp, sp, #8
    8768:	e50b0008 	str	r0, [fp, #-8]
	while (*str != '\0') {
    876c:	ea00000c 	b	87a4 <uart_printstr+0x48>
		uart_putc(*str);
    8770:	e51b3008 	ldr	r3, [fp, #-8]
    8774:	e5d33000 	ldrb	r3, [r3]
    8778:	e1a00003 	mov	r0, r3
    877c:	ebffffe3 	bl	8710 <uart_putc>
		if (*str == '\n')
    8780:	e51b3008 	ldr	r3, [fp, #-8]
    8784:	e5d33000 	ldrb	r3, [r3]
    8788:	e353000a 	cmp	r3, #10
    878c:	1a000001 	bne	8798 <uart_printstr+0x3c>
			uart_putc('\r');
    8790:	e3a0000d 	mov	r0, #13
    8794:	ebffffdd 	bl	8710 <uart_putc>
		str++;
    8798:	e51b3008 	ldr	r3, [fp, #-8]
    879c:	e2833001 	add	r3, r3, #1
    87a0:	e50b3008 	str	r3, [fp, #-8]
}


void uart_printstr (const char *str)
{
	while (*str != '\0') {
    87a4:	e51b3008 	ldr	r3, [fp, #-8]
    87a8:	e5d33000 	ldrb	r3, [r3]
    87ac:	e3530000 	cmp	r3, #0
    87b0:	1affffee 	bne	8770 <uart_printstr+0x14>
		uart_putc(*str);
		if (*str == '\n')
			uart_putc('\r');
		str++;
	}
}
    87b4:	e24bd004 	sub	sp, fp, #4
    87b8:	e8bd8800 	pop	{fp, pc}

000087bc <uart_init>:


void uart_init ( void ){
    87bc:	e92d4800 	push	{fp, lr}
    87c0:	e28db004 	add	fp, sp, #4
    87c4:	e24dd008 	sub	sp, sp, #8
    u32 cfg;

    PUT32(AUX_ENABLES,1);
    87c8:	e59f00b8 	ldr	r0, [pc, #184]	; 8888 <uart_init+0xcc>
    87cc:	e3a01001 	mov	r1, #1
    87d0:	eb000091 	bl	8a1c <PUT32>
    PUT32(AUX_MU_IER_REG,0);
    87d4:	e59f00b0 	ldr	r0, [pc, #176]	; 888c <uart_init+0xd0>
    87d8:	e3a01000 	mov	r1, #0
    87dc:	eb00008e 	bl	8a1c <PUT32>
    PUT32(AUX_MU_CNTL_REG,0);
    87e0:	e59f00a8 	ldr	r0, [pc, #168]	; 8890 <uart_init+0xd4>
    87e4:	e3a01000 	mov	r1, #0
    87e8:	eb00008b 	bl	8a1c <PUT32>
    PUT32(AUX_MU_LCR_REG,3);
    87ec:	e59f00a0 	ldr	r0, [pc, #160]	; 8894 <uart_init+0xd8>
    87f0:	e3a01003 	mov	r1, #3
    87f4:	eb000088 	bl	8a1c <PUT32>
    PUT32(AUX_MU_MCR_REG,0);
    87f8:	e59f0098 	ldr	r0, [pc, #152]	; 8898 <uart_init+0xdc>
    87fc:	e3a01000 	mov	r1, #0
    8800:	eb000085 	bl	8a1c <PUT32>
    PUT32(AUX_MU_IER_REG,0);
    8804:	e59f0080 	ldr	r0, [pc, #128]	; 888c <uart_init+0xd0>
    8808:	e3a01000 	mov	r1, #0
    880c:	eb000082 	bl	8a1c <PUT32>
    PUT32(AUX_MU_IIR_REG,0xC6);
    8810:	e59f0084 	ldr	r0, [pc, #132]	; 889c <uart_init+0xe0>
    8814:	e3a010c6 	mov	r1, #198	; 0xc6
    8818:	eb00007f 	bl	8a1c <PUT32>
    PUT32(AUX_MU_BAUD_REG,270);
    881c:	e59f007c 	ldr	r0, [pc, #124]	; 88a0 <uart_init+0xe4>
    8820:	e59f107c 	ldr	r1, [pc, #124]	; 88a4 <uart_init+0xe8>
    8824:	eb00007c 	bl	8a1c <PUT32>

    cfg = GET32(GPFSEL1);
    8828:	e59f0078 	ldr	r0, [pc, #120]	; 88a8 <uart_init+0xec>
    882c:	eb000078 	bl	8a14 <GET32>
    8830:	e50b0008 	str	r0, [fp, #-8]
    cfg &=~(7<<12); //gpio14
    8834:	e51b3008 	ldr	r3, [fp, #-8]
    8838:	e3c33a07 	bic	r3, r3, #28672	; 0x7000
    883c:	e50b3008 	str	r3, [fp, #-8]
    cfg |= 2<<12;    //alt5
    8840:	e51b3008 	ldr	r3, [fp, #-8]
    8844:	e3833a02 	orr	r3, r3, #8192	; 0x2000
    8848:	e50b3008 	str	r3, [fp, #-8]
	cfg &=~(7<<15); //gpio15
    884c:	e51b3008 	ldr	r3, [fp, #-8]
    8850:	e3c3390e 	bic	r3, r3, #229376	; 0x38000
    8854:	e50b3008 	str	r3, [fp, #-8]
    cfg |= 2<<12;    //alt5
    8858:	e51b3008 	ldr	r3, [fp, #-8]
    885c:	e3833a02 	orr	r3, r3, #8192	; 0x2000
    8860:	e50b3008 	str	r3, [fp, #-8]
    PUT32(GPFSEL1,cfg);
    8864:	e59f003c 	ldr	r0, [pc, #60]	; 88a8 <uart_init+0xec>
    8868:	e51b1008 	ldr	r1, [fp, #-8]
    886c:	eb00006a 	bl	8a1c <PUT32>


    PUT32(AUX_MU_CNTL_REG,3);
    8870:	e59f0018 	ldr	r0, [pc, #24]	; 8890 <uart_init+0xd4>
    8874:	e3a01003 	mov	r1, #3
    8878:	eb000067 	bl	8a1c <PUT32>
	
	return;
    887c:	e1a00000 	nop			; (mov r0, r0)
    8880:	e24bd004 	sub	sp, fp, #4
    8884:	e8bd8800 	pop	{fp, pc}
    8888:	20215004 	.word	0x20215004
    888c:	20215044 	.word	0x20215044
    8890:	20215060 	.word	0x20215060
    8894:	2021504c 	.word	0x2021504c
    8898:	20215050 	.word	0x20215050
    889c:	20215048 	.word	0x20215048
    88a0:	20215068 	.word	0x20215068
    88a4:	0000010e 	.word	0x0000010e
    88a8:	20200004 	.word	0x20200004

000088ac <math_div>:

.set	BSC_CLEAR_STATUS,	BSC_S_CLKT|BSC_S_ERR|BSC_S_DONE


math_div:
	MOV	R2, #0			@ Reset accumulator
    88ac:	e3a02000 	mov	r2, #0
	MOV	R3, #32			@ Number of bit divisions
    88b0:	e3a03020 	mov	r3, #32
	ADDS	R0, R0, R0		@ Shift dividend
    88b4:	e0900000 	adds	r0, r0, r0

000088b8 <_math_div>:
 _math_div:
	ADC	R2, R2, R2		@ Shift accumulator, w carry
    88b8:	e0a22002 	adc	r2, r2, r2
	CMP	R2, R1			@ Does it go?
    88bc:	e1520001 	cmp	r2, r1
	SUBHS	R2, R2, R1		@ if not, substract
    88c0:	20422001 	subcs	r2, r2, r1
	ADCS	R0, R0, R0		@ Shift dividend and accumulator
    88c4:	e0b00000 	adcs	r0, r0, r0
	SUB	R3, R3, #1		@ Decrement loop count
    88c8:	e2433001 	sub	r3, r3, #1
	TST	R3, R3			@ Leave carry
    88cc:	e1130003 	tst	r3, r3
	BNE	_math_div		@ Loop
    88d0:	1afffff8 	bne	88b8 <_math_div>

	MOV	R1, R2			@ Move remainder in R1 for return
    88d4:	e1a01002 	mov	r1, r2
					@ R0 holds the quotient

	MOV	PC, LR			@ Return
    88d8:	e1a0f00e 	mov	pc, lr

000088dc <gpio_fsel>:

@ gpio_fsel (gpio_pin, gpio_cmd)
@ Selects a function (lower 3 bits of R1) for register with ID (R0).
.globl gpio_fsel
gpio_fsel:
	CMP	R0, #MAX_GPIO_PIN	@ Check that the PIN is 0-53
    88dc:	e3500035 	cmp	r0, #53	; 0x35
	CMPLS	R1, #MAX_GPIO_CMD	@ Check that the CMD is 0-7
    88e0:	93510007 	cmpls	r1, #7
	BXHI	LR			@ Exit if not
    88e4:	812fff1e 	bxhi	lr

	PUSH	{R4-R5, LR}
    88e8:	e92d4030 	push	{r4, r5, lr}

	MOV	R4, R1			@ R4 = CMD
    88ec:	e1a04001 	mov	r4, r1
	MOV	R1, #10			@ R0 = PIN / 10
    88f0:	e3a0100a 	mov	r1, #10
	BL	math_div		@ R1 = PIN % 10
    88f4:	ebffffec 	bl	88ac <math_div>

	ADD	R1, R1, R1, LSL #1	@ R1 = (PIN % 10) * 3
    88f8:	e0811081 	add	r1, r1, r1, lsl #1
	LSL	R4, R4, R1		@ R4 = CMD << R1
    88fc:	e1a04114 	lsl	r4, r4, r1

	LDR	R5, =GPIO_BASE		@ Load GPIO address
    8900:	e59f509c 	ldr	r5, [pc, #156]	; 89a4 <i2c_set_slave+0xc>

	LDR	R2, [R5, R0, LSL #2]	@ Load PIN
    8904:	e7952100 	ldr	r2, [r5, r0, lsl #2]

	MOV	R3, #0b111		@ Load 3 bits
    8908:	e3a03007 	mov	r3, #7
	BIC	R2, R2, R3, LSL R1	@ Clear  bits
    890c:	e1c22113 	bic	r2, r2, r3, lsl r1
	ORR	R4, R4, R2		@ Update bits
    8910:	e1844002 	orr	r4, r4, r2

	STR	R4, [R5, R0, LSL #2]	@ Save PIN
    8914:	e7854100 	str	r4, [r5, r0, lsl #2]

	POP	{R4-R5, PC}		@ Return
    8918:	e8bd8030 	pop	{r4, r5, pc}

0000891c <gpio_set>:

@ gpio_set (gpio_pin, status)
@ Sets the GPIO PIN (R0), ON if R1==1, OFF if R1==0.
.globl gpio_set
gpio_set:
	CMP	R0, #MAX_GPIO_PIN	@ Check that the PIN is 0-53
    891c:	e3500035 	cmp	r0, #53	; 0x35
	BXHI	LR			@ Exit if not
    8920:	812fff1e 	bxhi	lr

	CMP	R0, #31			@ Select register bank
    8924:	e350001f 	cmp	r0, #31
	LDRLS	R2, =GPIO_BANK_0	@ 0
    8928:	959f2078 	ldrls	r2, [pc, #120]	; 89a8 <i2c_set_slave+0x10>
	LDRHI	R2, =GPIO_BANK_1	@ 4
    892c:	859f2078 	ldrhi	r2, [pc, #120]	; 89ac <i2c_set_slave+0x14>

	AND	R0, R0, #0b11111	@ PIN % 31
    8930:	e200001f 	and	r0, r0, #31

	MOV	R3, #1			@ Set bit
    8934:	e3a03001 	mov	r3, #1
	LSL	R0, R3, R0		@
    8938:	e1a00013 	lsl	r0, r3, r0

	TEQ	R1, #0			@ Check for ON or OFF
    893c:	e3310000 	teq	r1, #0
	STRNE	R0, [R2, #40]		@ ON
    8940:	15820028 	strne	r0, [r2, #40]	; 0x28
	STREQ	R0, [R2, #28]		@ OFF
    8944:	0582001c 	streq	r0, [r2, #28]

	BX	LR			@ Return
    8948:	e12fff1e 	bx	lr

0000894c <i2c_init>:


@ I2C初始化
.globl i2c_init
i2c_init:
	PUSH	{LR}
    894c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV	R0, #GPIO_SDA	@ Enable SDA
    8950:	e3a00000 	mov	r0, #0
	MOV	R1, #0			@
    8954:	e3a01000 	mov	r1, #0
	BL	gpio_fsel		@
    8958:	ebffffdf 	bl	88dc <gpio_fsel>
	MOV	R0, #GPIO_SDA	@
    895c:	e3a00000 	mov	r0, #0
	MOV	R1, #1			@
    8960:	e3a01001 	mov	r1, #1
	BL	gpio_set		@
    8964:	ebffffec 	bl	891c <gpio_set>

	MOV	R0, #GPIO_SCL	@ Enable SCL
    8968:	e3a00001 	mov	r0, #1
	MOV	R1, #0			@
    896c:	e3a01000 	mov	r1, #0
	BL	gpio_fsel		@
    8970:	ebffffd9 	bl	88dc <gpio_fsel>
	MOV	R0, #GPIO_SCL	@
    8974:	e3a00001 	mov	r0, #1
	MOV	R1, #1			@
    8978:	e3a01001 	mov	r1, #1
	BL	gpio_set		@
    897c:	ebffffe6 	bl	891c <gpio_set>

	POP	{PC}			@ Return
    8980:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008984 <i2c_wait>:
	
@ i2c_wait
@ Wait for the I2C to finish the current operation.
.globl i2c_wait
i2c_wait:
	LDR	R0, =BSC_BASE_0
    8984:	e59f0024 	ldr	r0, [pc, #36]	; 89b0 <i2c_set_slave+0x18>

00008988 <_i2c_wait>:

 _i2c_wait:

	LDRB	R1, [R0, #BSC_S]
    8988:	e5d01004 	ldrb	r1, [r0, #4]
	TST		R1, #BSC_S_DONE
    898c:	e3110002 	tst	r1, #2
	BEQ	_i2c_wait
    8990:	0afffffc 	beq	8988 <_i2c_wait>

	BX	LR
    8994:	e12fff1e 	bx	lr

00008998 <i2c_set_slave>:

@ i2c_set_slave (slave_addr)
@ Set the BSC_A register to the 7 bit long address of the slave in R0.
.globl i2c_set_slave
i2c_set_slave:
	LDR		R1, =BSC_BASE_0
    8998:	e59f1010 	ldr	r1, [pc, #16]	; 89b0 <i2c_set_slave+0x18>
	STRB	R0, [R1, #BSC_A]
    899c:	e5c1000c 	strb	r0, [r1, #12]
	BX		LR
    89a0:	e12fff1e 	bx	lr
	BL	math_div		@ R1 = PIN % 10

	ADD	R1, R1, R1, LSL #1	@ R1 = (PIN % 10) * 3
	LSL	R4, R4, R1		@ R4 = CMD << R1

	LDR	R5, =GPIO_BASE		@ Load GPIO address
    89a4:	20200000 	.word	0x20200000
gpio_set:
	CMP	R0, #MAX_GPIO_PIN	@ Check that the PIN is 0-53
	BXHI	LR			@ Exit if not

	CMP	R0, #31			@ Select register bank
	LDRLS	R2, =GPIO_BANK_0	@ 0
    89a8:	20200000 	.word	0x20200000
	LDRHI	R2, =GPIO_BANK_1	@ 4
    89ac:	20200004 	.word	0x20200004
	
@ i2c_wait
@ Wait for the I2C to finish the current operation.
.globl i2c_wait
i2c_wait:
	LDR	R0, =BSC_BASE_0
    89b0:	20205000 	.word	0x20205000

Disassembly of section .init:

000089b4 <_reset>:
.section .init
_reset:
	@ MOV只能是由8bit连续有效位通过偶数次移位能得到的数。
	@ LDR除了普通的读数之外，它没有立即数范围的限制。
	@ _start定义在ld文件中
	mov r0, #0x8000
    89b4:	e3a00902 	mov	r0, #32768	; 0x8000
	mov	r1, #0x0000
    89b8:	e3a01000 	mov	r1, #0
	@ ldmia r0!, {r3-r10} 将基址寄存器r0开始的连续8个地址单元的值分别赋给r3,r4,r5,r6,r7,r8,r9,r10,
	@ 注意的是r0指定的地址每次赋一次r0会加1,
	@ ld代表load指向下一个地址单元
	@ stmia r1!, {r3-r10} /跟上面指令功能相反，将寄存器r3到r10的值依次赋值给r1指定的地址单元，每次赋值一次r1就加1
	@ st代表store
	ldmia	r0!, {r2, r3, r4, r5, r6, r7, r8, r9} 
    89bc:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    89c0:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
	ldmia	r0!, {r2, r3, r4, r5, r6, r7, r8, r9} 
    89c4:	e8b003fc 	ldm	r0!, {r2, r3, r4, r5, r6, r7, r8, r9}
	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}
    89c8:	e8a103fc 	stmia	r1!, {r2, r3, r4, r5, r6, r7, r8, r9}

	@ 设置栈指针，在不同模式下就会使用不同的栈
	@ 设置中断（IRQ）模式下的栈指针
	mov r0, #(CPSR_MODE_IRQ | CPSR_IRQ_INHIBIT | CPSR_FIQ_INHIBIT )
    89cc:	e3a000d2 	mov	r0, #210	; 0xd2
	msr cpsr_c, r0
    89d0:	e121f000 	msr	CPSR_c, r0
	mov sp, #0x8000
    89d4:	e3a0d902 	mov	sp, #32768	; 0x8000
	
	@ 设置UNDEF模式下的栈指针
	mov r0,#CPSR_MODE_UNDEFINED
    89d8:	e3a0001b 	mov	r0, #27
	msr cpsr_c, r0
    89dc:	e121f000 	msr	CPSR_c, r0
	mov sp, #0x5000
    89e0:	e3a0da05 	mov	sp, #20480	; 0x5000
	
	@ 设置SVR模式下的栈指针
	mov r0, #(CPSR_MODE_SVR | CPSR_IRQ_INHIBIT | CPSR_FIQ_INHIBIT )
    89e4:	e3a000d3 	mov	r0, #211	; 0xd3
	msr cpsr_c, r0
    89e8:	e121f000 	msr	CPSR_c, r0
	mov sp, #0x4000
    89ec:	e3a0d901 	mov	sp, #16384	; 0x4000

	
	@ 加载atags到r2，atags是硬件信息的列表
	mov	r2, #0x100
    89f0:	e3a02c01 	mov	r2, #256	; 0x100
	@ 跳转到入口函数，_cstartup完成堆栈初始化，从此可以执行C自定义函数
	b	_cstartup
    89f4:	eafffec9 	b	8520 <_cstartup>

000089f8 <reboot>:

@ 将PC = 0，达到系统重启
.globl reboot
reboot:
	mov	pc, #0x00
    89f8:	e3a0f000 	mov	pc, #0

000089fc <halt>:
@ 暂停
.globl halt
halt:
	b	halt
    89fc:	eafffffe 	b	89fc <halt>

00008a00 <dummy>:

@ 一个空指令，但与暂停是不同的，这里会返回，暂停不会返回
.globl dummy
dummy:
    bx lr
    8a00:	e12fff1e 	bx	lr

00008a04 <try_lock>:

@ 锁的原子操作
.globl try_lock
try_lock:
    mov     r1, #0
    8a04:	e3a01000 	mov	r1, #0
	@ swp在arm v6中被弃用，arm v7不支持此命令，但会提示deprecated，不要紧
	@ 也可以添加-mno-warn-deprecated禁止报警
    swp     r2, r1, [r0]
    8a08:	e1002091 	swp	r2, r1, [r0]
    mov     r0, r2
    8a0c:	e1a00002 	mov	r0, r2
    blx     lr 
    8a10:	e12fff3e 	blx	lr

00008a14 <GET32>:

@ Gets a word from the memory location indicated by r0 and returns it.
.globl GET32
GET32:
	ldr	r0, [r0]
    8a14:	e5900000 	ldr	r0, [r0]
	bx	lr
    8a18:	e12fff1e 	bx	lr

00008a1c <PUT32>:

@ Puts a word to the memory location indicated by r0.
.globl PUT32
PUT32:
	str	r1, [r0]
    8a1c:	e5801000 	str	r1, [r0]
	bx	lr
    8a20:	e12fff1e 	bx	lr

00008a24 <_enable_interrupts>:
	
@ 开启全局中断
@ 因为启用寄存器的指令无法通过任何 C 指令获得
.global _enable_interrupts
_enable_interrupts:
    mrs	r0, cpsr
    8a24:	e10f0000 	mrs	r0, CPSR
    bic	r0, r0, #0x80
    8a28:	e3c00080 	bic	r0, r0, #128	; 0x80
    msr	cpsr_c, r0
    8a2c:	e121f000 	msr	CPSR_c, r0
    mov pc, lr
    8a30:	e1a0f00e 	mov	pc, lr

00008a34 <_disable_interrupts>:

@ 关闭中断
.global _disable_interrupts
_disable_interrupts:
    mrs	r0, cpsr
    8a34:	e10f0000 	mrs	r0, CPSR
    orr	r0, r0, #0x80
    8a38:	e3800080 	orr	r0, r0, #128	; 0x80
    msr	cpsr_c, r0
    8a3c:	e121f000 	msr	CPSR_c, r0
    mov pc, lr
    8a40:	e1a0f00e 	mov	pc, lr
